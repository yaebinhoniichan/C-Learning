#include <iostream>
using namespace std;

// ƒê·ªãnh nghƒ©a node
struct Node {
    int data;
    Node* next;
};

// H√†m th√™m node v√†o cu·ªëi danh s√°ch
void pushBack(Node*& head, int value) {
    Node* newNode = new Node{value, nullptr};
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// H√†m in danh s√°ch
void printList(Node* head) {
    while (head != nullptr) {
        cout << head->data << endl;
        head = head->next;
    }
}

// üîÑ H√†m ho√°n ƒë·ªïi gi√° tr·ªã gi·ªØa c√°c c·∫∑p node li·ªÅn k·ªÅ
void swapAdjacentValues(Node* head) {
    Node* curr = head;
    while (curr != nullptr && curr->next != nullptr) {
        swap(curr->data, curr->next->data);
        curr = curr->next->next;
    }
}

void reverseList (Node*& head) {
Node* prev = nullptr;
Node* curr = head;
Node* next = nullptr;
while (curr != nullptr) {
next = curr-‚Ä∫next; curr-‚Ä∫next = prev;
prev = curr;
curr = next;
ÔΩù
head = prev;
}

// Gi·∫£i ph√≥ng b·ªô nh·ªõ
void freeList(Node*& head) {
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}

int main() {
    Node* head = nullptr;
    int x;

    // Nh·∫≠p d·ªØ li·ªáu cho ƒë·∫øn khi g·∫∑p -1
    while (cin >> x && x != -1) {
        pushBack(head, x);
    }

    // Ho√°n ƒë·ªïi gi√° tr·ªã t·ª´ng c·∫∑p node li·ªÅn k·ªÅ
    swapAdjacentValues(head);

    // In danh s√°ch sau khi ho√°n ƒë·ªïi
    printList(head);

    // Gi·∫£i ph√≥ng b·ªô nh·ªõ
    freeList(head);

    return 0;
}
